name: Playwright Tests

on:
  push:
    branches: [main]
    paths-ignore:
      - "**.md"
      - "**/README.md"
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      testType:
        description: "Type of tests to run (ui, api, mobile, all)"
        required: false
        default: "all"

env:
  NODE_ENV: test
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: false
  TS_NODE_PROJECT: playwright.config.ts

jobs:
  test:
    name: Playwright Automation
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [20]
      fail-fast: false
    defaults:
      run:
        shell: bash
        working-directory: ./
    continue-on-error: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Remove any existing report files
        run: |
          rm -rf playwright-report || true
          rm -f playwright-report/results.json || true

      - name: Ensure report directory exists
        run: mkdir -p playwright-report

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests (HTML)
        id: run-tests
        run: |
          # run tests once to generate HTML report (from config)
          npx playwright test || true

      - name: Run Playwright tests (JSON output)
        if: always()
        run: |
          # produce a json results file for parsing (this reruns tests)
          mkdir -p playwright-report
          npx playwright test --reporter=json > playwright-report/results.json || true

      - name: "Debug: show generated report files"
        if: always()
        run: |
          echo "Listing playwright-report folder:"
          ls -la playwright-report || true
          if [ -f playwright-report/results.json ]; then
            echo "results.json size (bytes): $(stat -c%s playwright-report/results.json || true)"
            echo "Head of results.json (first 2000 bytes):"
            head -c 2000 playwright-report/results.json || true
          else
            echo "results.json not found"
          fi

      - name: Generate Playwright Test Summary (Node)
        if: always()
        run: |
          # Use Node scripts to normalize encoding and generate test-summary.json (avoids jq on Windows)
          if [ -f playwright-report/results.json ]; then
            echo "Normalizing encoding (if required) using Node"
            node tools/convert-results-encoding.js || (echo 'Conversion failed' && exit 1)
          else
            echo "results.json not found; skipping conversion"
          fi
          if [ -f playwright-report/results.json ] && [ -s playwright-report/results.json ]; then
            echo "Generating test-summary.json using Node"
            node tools/generate-test-summary.js || (echo 'Summary generation failed' && exit 1)
          else
            echo '{"project":"N/A","total":0,"passed":0,"failed":0,"skipped":0,"tests":[]}' > test-summary.json
          fi

      - name: Ensure report directory exists
        run: mkdir -p playwright-report

      - name: Upload Pages artifact (report)
        if: always()
        uses: actions/upload-pages-artifact@v1
        with:
          path: playwright-report

      - name: Deploy to GitHub Pages
        if: always()
        uses: actions/deploy-pages@v1

      - name: Build report URL
        id: build-url
        run: |
          OWNER=${{ github.repository_owner }}
          REPO=${{ github.event.repository.name }}
          # report served at https://OWNER.github.io/REPO/
          echo "report_url=https://$OWNER.github.io/$REPO/" >> $GITHUB_OUTPUT

      - name: Slack Notification - Summary with report link
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          STATUS="${{ steps.run-tests.outcome }}"
          REPORT_URL="${{ steps.build-url.outputs.report_url }}"
          if [ -s test-summary.json ]; then
            SUMMARY=$(jq -r '
              "Playwright Project: \(.project)\nTotal: \(.total)\n\n✅ Passed: \(.passed)\n❌ Failed: \(.failed)\n⏭️ Skipped: \(.skipped)\n\nTests:\n" +
              ([.tests[] | "- \(.name): \(.status)"] | join("\n"))
            ' test-summary.json)
          else
            SUMMARY="No test results found."
          fi
          PAYLOAD=$(jq -nc --arg status "$STATUS" --arg url "$REPORT_URL" --arg summary "$SUMMARY" '{blocks:[{type:"section",text:{type:"mrkdwn",text: "*Playwright Test Summary*\nStatus: *"+$status+"*\n\n"+$summary+"\n\nReport: "+$url}}]}')
          curl -s -X POST -H 'Content-type: application/json' --data "$PAYLOAD" $SLACK_WEBHOOK_URL
